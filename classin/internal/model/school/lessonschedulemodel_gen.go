// Code generated by goctl. DO NOT EDIT.

package school

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lessonScheduleFieldNames          = builder.RawFieldNames(&LessonSchedule{})
	lessonScheduleRows                = strings.Join(lessonScheduleFieldNames, ",")
	lessonScheduleRowsExpectAutoSet   = strings.Join(stringx.Remove(lessonScheduleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lessonScheduleRowsWithPlaceHolder = strings.Join(stringx.Remove(lessonScheduleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLessonScheduleIdPrefix  = "cache:lessonSchedule:id:"
	cacheLessonScheduleSidPrefix = "cache:lessonSchedule:sid:"
)

type (
	lessonScheduleModel interface {
		Insert(ctx context.Context, data *LessonSchedule) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LessonSchedule, error)
		FindOneBySid(ctx context.Context, sid int64) (*LessonSchedule, error)
		Update(ctx context.Context, data *LessonSchedule) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLessonScheduleModel struct {
		sqlc.CachedConn
		table string
	}

	LessonSchedule struct {
		Id             int64  `db:"id"`
		Sid            int64  `db:"sid"`            // 校校课表id
		Clzid          int64  `db:"clzid"`          // 班级 ID
		Courseid       int64  `db:"courseid"`       // 课程 ID
		Campusid       int64  `db:"campusid"`       // 校区 ID
		ClzName        string `db:"clzName"`        // 班级名称
		CourseName     string `db:"courseName"`     // 课程名称
		Campusname     string `db:"campusname"`     // 校区名称
		Organizationid int64  `db:"organizationid"` // 组织id
		Content        string `db:"content"`        // 上课内容
		Starttime      int64  `db:"starttime"`      // 开始时间戳
		Endtime        int64  `db:"endtime"`        // 结束时间戳
		Way            int64  `db:"way"`            // 上课方式 1线下2线上
		PlaceId        int64  `db:"placeId"`        // 上课地点id
		Place          string `db:"place"`          // 上课地点名称
		Note           string `db:"note"`           // 备注
		Duration       string `db:"duration"`       // 上课时长
		Classtype      int64  `db:"classtype"`      // 班级类型
		Coursetype     int64  `db:"coursetype"`     // 课程类型
		CourseCategory string `db:"courseCategory"` // 课程分类
		Category       int64  `db:"category"`       // 类别
		Tagcindex      int64  `db:"tagcindex"`      // 标签索引
		Tagcontent     string `db:"tagcontent"`     // 标签内容
		Status         int64  `db:"status"`         // 上课状态0 未上课 1已上课 2已取消
		Scountclz      int64  `db:"scountclz"`      // 班级总人数
		Scountjoin     int64  `db:"scountjoin"`     // 班级加入人数
		Scountleave    int64  `db:"scountleave"`    // 班级离开人数
		StarttimeStr   string `db:"starttimeStr"`   // 开始时间
		EndtimeStr     string `db:"endtimeStr"`     // 结束时间
		Teacher        string `db:"teacher"`        // 上课老师
		ClzZhujiao     string `db:"clzZhujiao"`     // 班级助教列表
		Md5Str         string `db:"md5Str"`         // 数据md5值
		Version        int64  `db:"version"`        // 版本号
		AddTime        int64  `db:"addTime"`
		UpdateTime     int64  `db:"updateTime"`
	}
)

func newLessonScheduleModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLessonScheduleModel {
	return &defaultLessonScheduleModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`lesson_schedule`",
	}
}

func (m *defaultLessonScheduleModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	lessonScheduleIdKey := fmt.Sprintf("%s%v", cacheLessonScheduleIdPrefix, id)
	lessonScheduleSidKey := fmt.Sprintf("%s%v", cacheLessonScheduleSidPrefix, data.Sid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, lessonScheduleIdKey, lessonScheduleSidKey)
	return err
}

func (m *defaultLessonScheduleModel) FindOne(ctx context.Context, id int64) (*LessonSchedule, error) {
	lessonScheduleIdKey := fmt.Sprintf("%s%v", cacheLessonScheduleIdPrefix, id)
	var resp LessonSchedule
	err := m.QueryRowCtx(ctx, &resp, lessonScheduleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lessonScheduleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLessonScheduleModel) FindOneBySid(ctx context.Context, sid int64) (*LessonSchedule, error) {
	lessonScheduleSidKey := fmt.Sprintf("%s%v", cacheLessonScheduleSidPrefix, sid)
	var resp LessonSchedule
	err := m.QueryRowIndexCtx(ctx, &resp, lessonScheduleSidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `sid` = ? limit 1", lessonScheduleRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, sid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLessonScheduleModel) Insert(ctx context.Context, data *LessonSchedule) (sql.Result, error) {
	lessonScheduleIdKey := fmt.Sprintf("%s%v", cacheLessonScheduleIdPrefix, data.Id)
	lessonScheduleSidKey := fmt.Sprintf("%s%v", cacheLessonScheduleSidPrefix, data.Sid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, lessonScheduleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Sid, data.Clzid, data.Courseid, data.Campusid, data.ClzName, data.CourseName, data.Campusname, data.Organizationid, data.Content, data.Starttime, data.Endtime, data.Way, data.PlaceId, data.Place, data.Note, data.Duration, data.Classtype, data.Coursetype, data.CourseCategory, data.Category, data.Tagcindex, data.Tagcontent, data.Status, data.Scountclz, data.Scountjoin, data.Scountleave, data.StarttimeStr, data.EndtimeStr, data.Teacher, data.ClzZhujiao, data.Md5Str, data.Version, data.AddTime, data.UpdateTime)
	}, lessonScheduleIdKey, lessonScheduleSidKey)
	return ret, err
}

func (m *defaultLessonScheduleModel) Update(ctx context.Context, newData *LessonSchedule) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	lessonScheduleIdKey := fmt.Sprintf("%s%v", cacheLessonScheduleIdPrefix, data.Id)
	lessonScheduleSidKey := fmt.Sprintf("%s%v", cacheLessonScheduleSidPrefix, data.Sid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lessonScheduleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Sid, newData.Clzid, newData.Courseid, newData.Campusid, newData.ClzName, newData.CourseName, newData.Campusname, newData.Organizationid, newData.Content, newData.Starttime, newData.Endtime, newData.Way, newData.PlaceId, newData.Place, newData.Note, newData.Duration, newData.Classtype, newData.Coursetype, newData.CourseCategory, newData.Category, newData.Tagcindex, newData.Tagcontent, newData.Status, newData.Scountclz, newData.Scountjoin, newData.Scountleave, newData.StarttimeStr, newData.EndtimeStr, newData.Teacher, newData.ClzZhujiao, newData.Md5Str, newData.Version, newData.AddTime, newData.UpdateTime, newData.Id)
	}, lessonScheduleIdKey, lessonScheduleSidKey)
	return err
}

func (m *defaultLessonScheduleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLessonScheduleIdPrefix, primary)
}

func (m *defaultLessonScheduleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lessonScheduleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLessonScheduleModel) tableName() string {
	return m.table
}
