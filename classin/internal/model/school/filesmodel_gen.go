// Code generated by goctl. DO NOT EDIT.

package school

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	filesFieldNames          = builder.RawFieldNames(&Files{})
	filesRows                = strings.Join(filesFieldNames, ",")
	filesRowsExpectAutoSet   = strings.Join(stringx.Remove(filesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	filesRowsWithPlaceHolder = strings.Join(stringx.Remove(filesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFilesIdPrefix   = "cache:files:id:"
	cacheFilesUuidPrefix = "cache:files:uuid:"
)

type (
	filesModel interface {
		Insert(ctx context.Context, data *Files) (sql.Result, error)
		TransInsertCtx(ctx context.Context, session sqlx.Session, data *Files) (sql.Result, error)

		FindOne(ctx context.Context, id int64) (*Files, error)
		FindOneByUuid(ctx context.Context, uuid string) (*Files, error)
		Update(ctx context.Context, data *Files) error
		Delete(ctx context.Context, id int64) error
		TransCtx(ctx context.Context, fn func(session sqlx.Session) error) error
	}

	defaultFilesModel struct {
		sqlc.CachedConn
		table string
	}

	Files struct {
		Id         int64  `db:"id"`
		Uuid       string `db:"uuid"`        // 唯一id
		ObjectKey  string `db:"object_key"`  // oss key
		Name       string `db:"name"`        // 文件名称
		FileType   string `db:"file_type"`   // 文件类型
		CreatorId  int64  `db:"creator_id"`  // 创建人ID
		AddTime    int64  `db:"add_time"`    // 创建时间
		UpdateTime int64  `db:"update_time"` // 更新时间
		Status     int64  `db:"status"`      // 文件状态 1 正常 2 删除
		Remark     string `db:"remark"`      // 备注
	}
)

func newFilesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFilesModel {
	return &defaultFilesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`files`",
	}
}

func (m *defaultFilesModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	filesIdKey := fmt.Sprintf("%s%v", cacheFilesIdPrefix, id)
	filesUuidKey := fmt.Sprintf("%s%v", cacheFilesUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, filesIdKey, filesUuidKey)
	return err
}

func (m *defaultFilesModel) TransCtx(ctx context.Context, fn func(session sqlx.Session) error) error {
	err := m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		err := fn(session)
		if err != nil {
			return err
		}
		return nil
	})
	return err
}

func (m *defaultFilesModel) FindOne(ctx context.Context, id int64) (*Files, error) {
	filesIdKey := fmt.Sprintf("%s%v", cacheFilesIdPrefix, id)
	var resp Files
	err := m.QueryRowCtx(ctx, &resp, filesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFilesModel) FindOneByUuid(ctx context.Context, uuid string) (*Files, error) {
	filesUuidKey := fmt.Sprintf("%s%v", cacheFilesUuidPrefix, uuid)
	var resp Files
	err := m.QueryRowIndexCtx(ctx, &resp, filesUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `uuid` = ? limit 1", filesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFilesModel) Insert(ctx context.Context, data *Files) (sql.Result, error) {
	filesIdKey := fmt.Sprintf("%s%v", cacheFilesIdPrefix, data.Id)
	filesUuidKey := fmt.Sprintf("%s%v", cacheFilesUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, filesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uuid, data.ObjectKey, data.Name, data.FileType, data.CreatorId, data.AddTime, data.Status, data.Remark)
	}, filesIdKey, filesUuidKey)
	return ret, err
}

func (m *defaultFilesModel) TransInsertCtx(ctx context.Context, session sqlx.Session, data *Files) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, filesRowsExpectAutoSet)
	return session.ExecCtx(ctx, query, data.Uuid, data.ObjectKey, data.Name, data.FileType, data.CreatorId, data.AddTime, data.Status, data.Remark)
}

func (m *defaultFilesModel) Update(ctx context.Context, newData *Files) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	filesIdKey := fmt.Sprintf("%s%v", cacheFilesIdPrefix, data.Id)
	filesUuidKey := fmt.Sprintf("%s%v", cacheFilesUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, filesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Uuid, newData.ObjectKey, newData.Name, newData.FileType, newData.CreatorId, newData.AddTime, newData.Status, newData.Remark, newData.Id)
	}, filesIdKey, filesUuidKey)
	return err
}

func (m *defaultFilesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheFilesIdPrefix, primary)
}

func (m *defaultFilesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFilesModel) tableName() string {
	return m.table
}
