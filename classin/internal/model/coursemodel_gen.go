// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	courseFieldNames          = builder.RawFieldNames(&Course{})
	courseRows                = strings.Join(courseFieldNames, ",")
	courseRowsExpectAutoSet   = strings.Join(stringx.Remove(courseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	courseRowsWithPlaceHolder = strings.Join(stringx.Remove(courseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCourseIdPrefix       = "cache:course:id:"
	cacheCourseUniqueIdPrefix = "cache:course:uniqueId:"
)

type (
	courseModel interface {
		Insert(ctx context.Context, data *Course) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Course, error)
		FindOneByUniqueId(ctx context.Context, uniqueId string) (*Course, error)
		Update(ctx context.Context, data *Course) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCourseModel struct {
		sqlc.CachedConn
		table string
	}

	Course struct {
		Id              int64  `db:"id"`              // 主键id
		UniqueId        string `db:"uniqueId"`        // 唯一id
		CourseId        int64  `db:"courseId"`        // classin 课程id
		ClassId         int64  `db:"classId"`         // classin 课节id
		CourseName      string `db:"courseName"`      // classin 课程名称
		ClassName       string `db:"className"`       // classin 课节名称
		TeacherName     string `db:"teacherName"`     // 老师姓名
		TeacherMobile   string `db:"teacherMobile"`   // 老师手机号
		CourseStartTime int64  `db:"courseStartTime"` // 课程开始时间
		CourseEndTime   int64  `db:"courseEndTime"`   // 课程结束时间
		SyncStatus      int64  `db:"syncStatus"`      // 0 已添加 1 同步中 2 同步完成
		SourceType      int64  `db:"sourceType"`      // 1 手动抓取 2 消息推送
		AddTime         int64  `db:"addTime"`         // 添加时间
		SeatNum         int64  `db:"seatNum"`         // 上课人数
		IsDc            int64  `db:"isDc"`            // 是否双摄
		IsHd            int64  `db:"isHd"`            // 是否高清
	}
)

func newCourseModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCourseModel {
	return &defaultCourseModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`course`",
	}
}

func (m *defaultCourseModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	courseIdKey := fmt.Sprintf("%s%v", cacheCourseIdPrefix, id)
	courseUniqueIdKey := fmt.Sprintf("%s%v", cacheCourseUniqueIdPrefix, data.UniqueId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, courseIdKey, courseUniqueIdKey)
	return err
}

func (m *defaultCourseModel) FindOne(ctx context.Context, id int64) (*Course, error) {
	courseIdKey := fmt.Sprintf("%s%v", cacheCourseIdPrefix, id)
	var resp Course
	err := m.QueryRowCtx(ctx, &resp, courseIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", courseRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCourseModel) FindOneByUniqueId(ctx context.Context, uniqueId string) (*Course, error) {
	courseUniqueIdKey := fmt.Sprintf("%s%v", cacheCourseUniqueIdPrefix, uniqueId)
	var resp Course
	err := m.QueryRowIndexCtx(ctx, &resp, courseUniqueIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `uniqueId` = ? limit 1", courseRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uniqueId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCourseModel) Insert(ctx context.Context, data *Course) (sql.Result, error) {
	courseIdKey := fmt.Sprintf("%s%v", cacheCourseIdPrefix, data.Id)
	courseUniqueIdKey := fmt.Sprintf("%s%v", cacheCourseUniqueIdPrefix, data.UniqueId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, courseRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UniqueId, data.CourseId, data.ClassId, data.CourseName, data.ClassName, data.TeacherName, data.TeacherMobile, data.CourseStartTime, data.CourseEndTime, data.SyncStatus, data.SourceType, data.AddTime, data.SeatNum, data.IsDc, data.IsHd)
	}, courseIdKey, courseUniqueIdKey)
	return ret, err
}

func (m *defaultCourseModel) Update(ctx context.Context, newData *Course) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	courseIdKey := fmt.Sprintf("%s%v", cacheCourseIdPrefix, data.Id)
	courseUniqueIdKey := fmt.Sprintf("%s%v", cacheCourseUniqueIdPrefix, data.UniqueId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, courseRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UniqueId, newData.CourseId, newData.ClassId, newData.CourseName, newData.ClassName, newData.TeacherName, newData.TeacherMobile, newData.CourseStartTime, newData.CourseEndTime, newData.SyncStatus, newData.SourceType, newData.AddTime, newData.SeatNum, newData.IsDc, newData.IsHd, newData.Id)
	}, courseIdKey, courseUniqueIdKey)
	return err
}

func (m *defaultCourseModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCourseIdPrefix, primary)
}

func (m *defaultCourseModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", courseRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCourseModel) tableName() string {
	return m.table
}
