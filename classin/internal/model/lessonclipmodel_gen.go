// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lessonClipFieldNames          = builder.RawFieldNames(&LessonClip{})
	lessonClipRows                = strings.Join(lessonClipFieldNames, ",")
	lessonClipRowsExpectAutoSet   = strings.Join(stringx.Remove(lessonClipFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	lessonClipRowsWithPlaceHolder = strings.Join(stringx.Remove(lessonClipFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLessonClipIdPrefix            = "cache:lessonClip:id:"
	cacheLessonClipFileOriginUrlPrefix = "cache:lessonClip:fileOriginUrl:"
)

type (
	lessonClipModel interface {
		Insert(ctx context.Context, data *LessonClip) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LessonClip, error)
		FindOneByFileOriginUrl(ctx context.Context, fileOriginUrl string) (*LessonClip, error)
		Update(ctx context.Context, data *LessonClip) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLessonClipModel struct {
		sqlc.CachedConn
		table string
	}

	LessonClip struct {
		Id             int64  `db:"id"`             // 主键id
		CourseId       int64  `db:"courseId"`       // classin 课程id
		ClassId        int64  `db:"classId"`        // classin 课节id
		SequenceNumber int64  `db:"sequenceNumber"` // 片段序号
		FileId         string `db:"fileId"`         // 文件id
		FileOriginUrl  string `db:"fileOriginUrl"`  // 片段原始地址
		ObjectKey      string `db:"objectKey"`      // 片段保存地址
		FileSize       int64  `db:"fileSize"`       // 文件大小
		FileStatus     int64  `db:"fileStatus"`     // 0 已添加 1 同步中 2 同步完成
		SourceType     int64  `db:"sourceType"`     // 1 手动抓取 2 消息推送
		AddTime        int64  `db:"addTime"`        // 添加时间
	}
)

func newLessonClipModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultLessonClipModel {
	return &defaultLessonClipModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`lesson_clip`",
	}
}

func (m *defaultLessonClipModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	lessonClipFileOriginUrlKey := fmt.Sprintf("%s%v", cacheLessonClipFileOriginUrlPrefix, data.FileOriginUrl)
	lessonClipIdKey := fmt.Sprintf("%s%v", cacheLessonClipIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, lessonClipFileOriginUrlKey, lessonClipIdKey)
	return err
}

func (m *defaultLessonClipModel) FindOne(ctx context.Context, id int64) (*LessonClip, error) {
	lessonClipIdKey := fmt.Sprintf("%s%v", cacheLessonClipIdPrefix, id)
	var resp LessonClip
	err := m.QueryRowCtx(ctx, &resp, lessonClipIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lessonClipRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLessonClipModel) FindOneByFileOriginUrl(ctx context.Context, fileOriginUrl string) (*LessonClip, error) {
	lessonClipFileOriginUrlKey := fmt.Sprintf("%s%v", cacheLessonClipFileOriginUrlPrefix, fileOriginUrl)
	var resp LessonClip
	err := m.QueryRowIndexCtx(ctx, &resp, lessonClipFileOriginUrlKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `fileOriginUrl` = ? limit 1", lessonClipRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, fileOriginUrl); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLessonClipModel) Insert(ctx context.Context, data *LessonClip) (sql.Result, error) {
	lessonClipFileOriginUrlKey := fmt.Sprintf("%s%v", cacheLessonClipFileOriginUrlPrefix, data.FileOriginUrl)
	lessonClipIdKey := fmt.Sprintf("%s%v", cacheLessonClipIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, lessonClipRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CourseId, data.ClassId, data.SequenceNumber, data.FileId, data.FileOriginUrl, data.ObjectKey, data.FileSize, data.FileStatus, data.SourceType, data.AddTime)
	}, lessonClipFileOriginUrlKey, lessonClipIdKey)
	return ret, err
}

func (m *defaultLessonClipModel) Update(ctx context.Context, newData *LessonClip) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	lessonClipFileOriginUrlKey := fmt.Sprintf("%s%v", cacheLessonClipFileOriginUrlPrefix, data.FileOriginUrl)
	lessonClipIdKey := fmt.Sprintf("%s%v", cacheLessonClipIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lessonClipRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CourseId, newData.ClassId, newData.SequenceNumber, newData.FileId, newData.FileOriginUrl, newData.ObjectKey, newData.FileSize, newData.FileStatus, newData.SourceType, newData.AddTime, newData.Id)
	}, lessonClipFileOriginUrlKey, lessonClipIdKey)
	return err
}

func (m *defaultLessonClipModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLessonClipIdPrefix, primary)
}

func (m *defaultLessonClipModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lessonClipRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLessonClipModel) tableName() string {
	return m.table
}
